package main

import (
	"fmt"
	"os"
	"os/exec"
	"os/user"
	"strings"
	"text/template"
	"time"
)

var versionFile = `// generated by go:generate version; DO NOT EDIT
package flags

import (
	"flag"
	"fmt"
	"os"
)

func init() {
	var version bool

	flag.BoolVar(&version, "version", false, "print application version and build info")

	flag.Parse()

	if version {
		fmt.Printf(~{{.Program}} {{.ProgramVersion}} {{.ProgramOS}} {{.ProgramArch}}
Build info:
  {{.GoVersion}}
  current user {{.Username}}({{.UserId}})
  build time {{.BuildTime}}
  system info {{.Uname}}
Source version:
  {{.GitVersion}}
  current branch {{.CurBranch}}
  last commit {{.LastCommit}}
~)

		os.Exit(0)
	}
}
`

const filename = "flags/version.go"

type Version struct {
	Program        string
	ProgramVersion string
	ProgramOS      string
	ProgramArch    string
	GoVersion      string
	Username       string
	UserId         string
	BuildTime      time.Time
	Uname          string
	GitVersion     string
	CurBranch      string
	LastCommit     string
}

// go install github.com/CardInfoLink/quickpay/version
func main() {
	versionFile = strings.Replace(versionFile, "~", "`", -1)
	// gitStauts := runCommand("git", "status")
	// fmt.Printf("git status:\n%s", gitStauts)

	curUser, err := user.Current()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	v := Version{
		Program:        "quickpay",
		ProgramVersion: runCommand("git", "describe", "--abbrev=0", "--tags"),
		ProgramOS:      os.Getenv("GOOS"),
		ProgramArch:    os.Getenv("GOARCH"),
		GoVersion:      runCommand("go", "version"),
		Username:       curUser.Name,
		UserId:         curUser.Uid,
		BuildTime:      time.Now(),
		Uname:          runCommand("uname", "-a"),
		GitVersion:     runCommand("git", "--version"),
		CurBranch:      runCommand("git", "rev-parse", "--abbrev-ref", "HEAD"),
		LastCommit:     runCommand("git", "rev-parse", "--verify", "HEAD"),
	}

	tmpl, err := template.New("version").Parse(versionFile)
	if err != nil {
		panic(err)
	}
	file, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(file, v)
	if err != nil {
		panic(err)
	}
}

func runCommand(name string, args ...string) string {
	cmd := exec.Command(name, args...)
	// out, err := cmd.CombinedOutput()
	out, err := cmd.Output()
	if err != nil {
		fmt.Printf("run `%s %s` command error: %s\n", name, args, err)

		os.Exit(1)
	}
	return strings.Trim(string(out), "\n")
}
