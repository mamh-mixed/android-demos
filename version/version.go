package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"strings"
	"time"
)

const versionFile = `// generated by go:generate version; DO NOT EDIT
package flags

import (
    "flag"
	"fmt"
    "os"
)

func init() {
	var version bool

	flag.BoolVar(&version, "version", false, "print application version and build info")

	flag.Parse()

	if version {
		fmt.Printf(
            "quickpay %%s %%s %%s\ngit:\n  current branch %%s\n  last commit %%s\nbuild info:\n  build time %s\n  %%s\n  %%s  %%s\n",
            "%s","%s","%s","%s","%s","%s","%s","%s","%s","%s")

        os.Exit(0)
	}
}

`

// go install github.com/CardInfoLink/quickpay/version
func main() {
	// gitStauts := runCommand("git", "status")
	// fmt.Printf("git status:\n%s", gitStauts)

	gitLastTag := runCommand("git", "describe", "--abbrev=0", "--tags")
	// fmt.Printf("quickpay %s %s %s\n", gitLastTag, os.Getenv("GOOS"), os.Getenv("GOARCH"))

	gitBranch := runCommand("git", "rev-parse", "--abbrev-ref", "HEAD")
	gitRev := runCommand("git", "rev-parse", "--verify", "HEAD")
	// fmt.Printf("git:\n  current branch %s\n  last commit %s\n", gitBranch, gitRev)

	uname := runCommand("uname", "-a")
	goVersion := runCommand("go", "version")
	gitVersion := runCommand("git", "--version")

	fmt.Println("build info:")
	// fmt.Printf("  %s\n", uname)
	// fmt.Printf("  %s\n", goVersion)
	// fmt.Printf("  %s\n", gitVersion)

	src := fmt.Sprintf(versionFile, gitLastTag, os.Getenv("GOOS"), os.Getenv("GOARCH"),
		gitBranch, gitRev, time.Now(), uname, goVersion, gitVersion)
	fmt.Printf("-------\n%s\n------\n", src)
	err := ioutil.WriteFile("flags/version.go", []byte(src), 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

func runCommand(name string, args ...string) string {
	cmd := exec.Command(name, args...)
	// out, err := cmd.CombinedOutput()
	out, err := cmd.Output()
	if err != nil {
		fmt.Printf("run `%s %s` command error: %s\n", name, args, err)

		os.Exit(1)
	}
	return strings.Trim(string(out), "\n")
}
