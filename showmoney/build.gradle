apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.cardinfolink.yunshouyin"
        minSdkVersion 8
        targetSdkVersion 23
        versionCode 55
        versionName "2.0"
        // 3 options: pro, test, dev
        buildConfigField 'String', 'ENVIRONMENT', '"pro"'
    }

    productFlavors{
        cardinfolink {
            manifestPlaceholders = [UMENG_APPKEY_VALUE: "55ebd98367e58e0f13002f2a", UMENG_CHANNEL_VALUE: "yunshouyin"]
            //comment out below for go live
            applicationId "com.cardinfolink.yunshouyin"
            buildConfigField 'String', 'ENVIRONMENT', '"pro"'
        }
        _test{
            manifestPlaceholders = [UMENG_APPKEY_VALUE: "55ebd98367e58e0f13002f2a", UMENG_CHANNEL_VALUE: "yunshouyin"]
            //comment out below for go live
            applicationId "com.cardinfolink.yunshouyin.test"
            buildConfigField 'String', 'ENVIRONMENT', '"test"'
        }
    }

    signingConfigs {
        debug {
        }

        release {
            storeFile file("../key.keystore")
            storePassword "cil1009"
            keyAlias "cardinfolink"
            keyPassword "cil1009"
        }
    }

    buildTypes {
        release {
            //TODO: 混淆代码
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            shrinkResources false
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "${releaseTime()}_showmoney_v${variant.versionName}_${variant.productFlavors[0].name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile project(':cashierSdk')
    compile project(':pulltorefreshlibrary')
    compile project(':menulibrary')
    compile files('libs/commons-codec-1.3.jar')
    compile files('libs/core.jar')
    compile files('libs/umeng-analytics-v5.5.3.jar')
    compile files('libs/umeng-update-v2.6.0.1.jar')
    compile 'commons-io:commons-io:2.4'
    compile 'com.google.code.gson:gson:2.4'
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
